package ChromebookManager;

import javax.swing.*;
import java.awt.Font;
import javax.swing.table.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.util.Scanner;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;

public class ModifyChromebooks extends JFrame {
    // Initiating JLabels needed
    JLabel chromebooksInSystem = new JLabel("Chromebooks in System");

    // Initiating JButtons needed
    JButton removeLaptop = new JButton("Remove Laptop");
    JButton addLaptop = new JButton("Add Laptop");

    // Initiating JTable needed    
    private DefaultTableModel model = new DefaultTableModel();
    private JTable table = new JTable(model);
    JScrollPane pane = new JScrollPane(table);

    // Setting fonts needed
    Font bigSerif = new Font("serif", Font.PLAIN, 30);
    Font smallSerif = new Font("serif", Font.PLAIN, 18);

    public void top() {
        chromebooksInSystem.setBounds(132, -20, 400, 100);
        chromebooksInSystem.setFont(bigSerif);
    }

    public void table() {
        // Makes it so the table is not editable or changeable
        table.setDefaultEditor(Object.class, null);
        table.getTableHeader().setReorderingAllowed(false);
        table.getTableHeader().setResizingAllowed(false);
        pane.setBounds(48, 75, 495, 465);
        
        // Makes it so that only one row is selectable in the table
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Adding columns to the table
        model.addColumn("Cart");
        model.addColumn("Laptop");
    }

    public void bottom() {
        addLaptop.setBounds(55, 580, 225, 50);
        removeLaptop.setBounds(310, 580, 225, 50);
    }

    public boolean currentlySignedOut(String laptopNumber) throws Exception {
      boolean currentlySignedOut = false;
      File unreturnedChromebooksFile = new File("unreturned_chromebooks.txt");
      Scanner unreturnedChromebookScanner = new Scanner(unreturnedChromebooksFile);
      while (unreturnedChromebookScanner.hasNextLine()) {
        String chromebook = unreturnedChromebookScanner.nextLine();
        String[] chromebookData = chromebook.split(" ");
        if (chromebookData[1].equals(laptopNumber)) {
          currentlySignedOut = true;
        }
        break;
      }
      return currentlySignedOut;
    }
    
    public void actionAddLaptop() {
        addLaptop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFrame parent = new JFrame();
                String[] carts = {"C1", "C2", "C3", "C4"};
                JComboBox enterCartNumber = new JComboBox(carts);
                String[] laptops = {"L1", "L2", "L3", "L4", "L5", "L6", "L7", "L8", "L9", "L10", "L11", "L12"};
                JComboBox enterLaptopNumber = new JComboBox(laptops);
                Object[] message = {
                    "Enter Cart Number:", enterCartNumber,
                    "Enter Laptop Number:", enterLaptopNumber
                };
                
                int option = JOptionPane.showConfirmDialog(parent, message, "Add laptop", JOptionPane.OK_CANCEL_OPTION);
                try {
                  if (option == JOptionPane.OK_OPTION) {
                    boolean laptopIsAddable = true;
                    String cartSelected = enterCartNumber.getSelectedItem().toString();
                    int cartNumber = Integer.parseInt(cartSelected.substring(1));
                    String chromebook = enterLaptopNumber.getSelectedItem().toString();
                    int line = 0;
                    
                    String[] cartOne = new String[12];
                    String[] cartTwo = new String[12];
                    String[] cartThree = new String[12];
                    String[] cartFour = new String[12];
                    
                    File systemLaptopsFile = new File("system_laptops.txt");
                    Scanner systemLaptopScanner = new Scanner(systemLaptopsFile);
                    while (systemLaptopScanner.hasNextLine()) {
                      line++;
                      String cart = systemLaptopScanner.nextLine();
                      if (line == cartNumber) {
                        String[] laptopsInCart = cart.split(" ");
                        for (String laptop : laptopsInCart) {
                          if (chromebook.equals(laptop)) {
                            laptopIsAddable = false;
                            JOptionPane.showMessageDialog(null, "This chromebook is already in the system\nPlease ensure you are adding the correct Chromebook and try again.");
                            break;
                          }
                        }
                      }
                      
                      switch(line) {
                        case 1:
                          cartOne = cart.split(" ");
                          break;
                        case 2:
                          cartTwo = cart.split(" ");
                          break;
                        case 3:
                          cartThree = cart.split(" ");
                          break;
                        case 4:
                          cartFour = cart.split(" ");
                          break;
                      }
                    }
                    
                    if (laptopIsAddable) {
                      if (cartSelected.equals("C1")) {
                        cartOne = ChromebookManager.addLaptopToCart(cartOne, Integer.parseInt(chromebook.substring(1)));
                      }
                      else if (cartSelected.equals("C2")) {
                        cartTwo = ChromebookManager.addLaptopToCart(cartTwo, Integer.parseInt(chromebook.substring(1)));
                      }
                      else if (cartSelected.equals("C3")) {
                        cartThree = ChromebookManager.addLaptopToCart(cartThree, Integer.parseInt(chromebook.substring(1)));
                      }
                      else if (cartSelected.equals("C4")) {
                        cartFour = ChromebookManager.addLaptopToCart(cartFour, Integer.parseInt(chromebook.substring(1)));
                      }
                      
                      FileWriter systemLaptopWriter = new FileWriter("system_laptops.txt");
                      systemLaptopWriter.write(arrayToString(cartOne) + "\n" + arrayToString(cartTwo) + "\n" + arrayToString(cartThree) + "\n" + arrayToString(cartFour));
                      systemLaptopWriter.close();
                      
                      ChromebookManager.updateData();
                      updateTable();
                    }
                    
                  }
                }
                catch (IOException javaIOException) {
                  javaIOException.printStackTrace();
                }
                catch (Exception javaLangException) {
                  javaLangException.printStackTrace();
                }
            }
        });
    }
    
    public void actionRemoveLaptop() {
      removeLaptop.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          try {
            int row = table.getSelectedRow();
            if (row != -1) {
              String cart = String.valueOf(table.getModel().getValueAt(row, 0));
              String laptop = String.valueOf(table.getModel().getValueAt(row, 1));
              
              if (currentlySignedOut(laptop)) {
                JOptionPane.showMessageDialog(null, "This chromebook is currently signed out and must be returned\nbefore it can be removed from the system.");
              }
              else if (lastLaptopInCart(Integer.parseInt(cart.substring(1)))) {
                JOptionPane.showMessageDialog(null, "You cannot remove this Chromebook as it is the only Chromebook left in the cart.\nPlease re-add another Chromebook before removing this specific one.");
              }
              else {
                File systemLaptopsFile = new File("system_laptops.txt");
                Scanner systemLaptopScanner = new Scanner(systemLaptopsFile);
                String cartData = "";
                int line = 0;

                String[] cartOne = new String[12];
                String[] cartTwo = new String[12];
                String[] cartThree = new String[12];
                String[] cartFour = new String[12];

                while (systemLaptopScanner.hasNextLine()) {
                  line++;
                  cartData = systemLaptopScanner.nextLine();
                  switch (line) {
                    case 1:
                      cartOne = cartData.split(" ");
                      break;
                    case 2:
                      cartTwo = cartData.split(" ");
                      break;
                    case 3:
                      cartThree = cartData.split(" ");
                      break;
                    case 4:
                      cartFour = cartData.split(" ");
                      break;
                  }
                }
                
                if (cart.equals("C1")) {
                  cartOne = removeLaptopFromCart(cartOne, laptop);
                }
                else if (cart.equals("C2")) {
                  cartTwo = removeLaptopFromCart(cartTwo, laptop);
                }
                else if (cart.equals("C3")) {
                  cartThree = removeLaptopFromCart(cartThree, laptop);
                }
                else if (cart.equals("C4")) {
                  cartFour = removeLaptopFromCart(cartFour, laptop);
                }
                
                FileWriter systemLaptopWriter = new FileWriter("system_laptops.txt");
                systemLaptopWriter.write(arrayToString(cartOne) + "\n" + arrayToString(cartTwo) + "\n" + arrayToString(cartThree) + "\n" + arrayToString(cartFour));
                systemLaptopWriter.close();
                model.removeRow(row);
                
              }
              
              ChromebookManager.updateData();
            }
            else {
              JOptionPane.showMessageDialog(null, "You must select a laptop in the table before removing it.");
            }
          }
          catch (IOException javaIOException) {
            javaIOException.printStackTrace();
          }
          catch (Exception javaLangException) {
            javaLangException.printStackTrace();
          }   
        }
      });
    }
    
    public void actionCloseModifyChromebooks() {
      addWindowListener(new WindowAdapter() {
        public void windowClosing(WindowEvent windowEvent) {
          AdminPanel.closeModifyChromebooks();
        }
      });
    }
    
    public static String arrayToString(String[] array) {
      String convertedString = "";
      for (String element : array) {
        convertedString += " " + element;
      }
      convertedString = convertedString.substring(1, convertedString.length());
      return convertedString;
    }
        
    public static boolean lastLaptopInCart(int cartNumber) throws Exception {
      boolean lastLaptopInCart = false;
      File systemLaptopsFile = new File("system_laptops.txt");
      Scanner systemLaptopScanner = new Scanner(systemLaptopsFile);
      int line = 0;
      String lineData = "";
      while (systemLaptopScanner.hasNextLine()) {
        line++;
        lineData = systemLaptopScanner.nextLine();
        if (line == cartNumber && lineData.length() <= 3) {
          lastLaptopInCart = true;
        }
      }
      
      return lastLaptopInCart;
    }
    
    public static String[] removeLaptopFromCart (String[] laptopsInCart, String laptopToRemove) {
      ArrayList<String> laptops = new ArrayList<String>(Arrays.asList(laptopsInCart));
      laptops.remove(laptopToRemove);
      String[] newLaptopsInCart = new String[laptopsInCart.length - 1];
      for (int i = 0; i < laptops.size(); i++) {
        newLaptopsInCart[i] = laptops.get(i);
      }
      return newLaptopsInCart;
    }
    
    public void updateTable() throws Exception {
      model.setRowCount(0);
      
      File systemLaptopsFile = new File("system_laptops.txt");
      Scanner systemLaptopScanner = new Scanner(systemLaptopsFile);
        int line = 0;
        while (systemLaptopScanner.hasNextLine()) {
          line++;
          String cartData = systemLaptopScanner.nextLine();
          String[] laptopsInCart = cartData.split(" ");
          for (String laptop : laptopsInCart) {
            model.addRow(new Object[]{"C" + String.valueOf(line), laptop});
          }
        }
        
        // Centers all cells in table
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment( SwingConstants.CENTER );
        for (int i=0; i<table.getColumnCount(); i++){
          table.setDefaultRenderer(table.getColumnClass(i), renderer);
        }
    }

    ModifyChromebooks() throws Exception {
        top();
        table();
        bottom();
        actionAddLaptop();
        actionRemoveLaptop();
        actionCloseModifyChromebooks();

        add(chromebooksInSystem);
        add(pane);
        add(addLaptop);
        add(removeLaptop);

        setSize(600, 700); 
        setLayout(null);
        setVisible(true);
        
        updateTable();
    }
}